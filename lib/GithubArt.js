// Generated by CoffeeScript 1.4.0
(function() {
  var DateRange, PixelArt, Repos,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PixelArt = require('./PixelArt').PixelArt;

  DateRange = require('./DateRange').DateRange;

  Repos = require('./Repos').Repos;

  module.exports.GhCalendarPixelArt = (function() {

    function GhCalendarPixelArt(opts, fn) {
      var _base, _base1, _base2, _ref, _ref1, _ref2,
        _this = this;
      this.opts = opts != null ? opts : {};
      if (fn == null) {
        fn = (function() {});
      }
      this.map = __bind(this.map, this);

      this._create_repos_rec = __bind(this._create_repos_rec, this);

      this.create_repos = __bind(this.create_repos, this);

      this.run = __bind(this.run, this);

      if ((_ref = (_base = this.opts).repos) == null) {
        _base.repos = {};
      }
      if ((_ref1 = (_base1 = this.opts).art) == null) {
        _base1.art = {};
      }
      if ((_ref2 = (_base2 = this.opts).range) == null) {
        _base2.range = {};
      }
      new PixelArt(this.opts.art, function(err, data) {
        _this.pa = data;
        if (err) {
          return fn(err, data);
        }
        return new DateRange(_this.opts.range, function(err, data) {
          _this.dr = data;
          if (err) {
            return fn(err, data);
          }
          return new Repos(_this.opts.repos, function(err, data) {
            _this.re = data;
            if (err) {
              return fn(err, data);
            }
            _this.__defineGetter__('map', _this.map);
            return fn(false, {});
          });
        });
      });
      return this;
    }

    GhCalendarPixelArt.prototype.run = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = (function() {});
      }
      return this.create_repos(function(err, data) {
        if (err) {
          return fn(err, data);
        }
        return fn(false, {});
      });
    };

    GhCalendarPixelArt.prototype.create_repos = function(fn) {
      var date, i, nbCommits, _i, _ref,
        _this = this;
      if (fn == null) {
        fn = (function() {});
      }
      this.todo = [];
      _ref = this.map;
      for (date in _ref) {
        nbCommits = _ref[date];
        for (i = _i = 0; 0 <= nbCommits ? _i < nbCommits : _i > nbCommits; i = 0 <= nbCommits ? ++_i : --_i) {
          this.todo.push({
            date: date
          });
        }
      }
      return this.re.init(function(err, data) {
        if (err) {
          return fn(err, data);
        }
        return _this._create_repos_rec(function(err, data) {
          return _this.re.push(fn);
        });
      });
    };

    GhCalendarPixelArt.prototype._create_repos_rec = function(fn) {
      var next,
        _this = this;
      if (fn == null) {
        fn = (function() {});
      }
      if (!this.todo.length) {
        return fn(false, {});
      }
      next = this.todo.shift();
      return this.re.createFile('pony.txt', Math.random().toString(), function(err, data) {
        if (err) {
          return fn(err, data);
        }
        return _this.re.add('pony.txt', function(err, data) {
          var opts;
          if (err) {
            return fn(err, data);
          }
          opts = {
            date: next.date,
            message: 'pony pony pony'
          };
          return _this.re.commit(opts, function(err, data) {
            if (err) {
              return fn(err, data);
            }
            return _this._create_repos_rec(fn);
          });
        });
      });
    };

    GhCalendarPixelArt.prototype.map = function() {
      var drArr, i, paArr, _i, _ref;
      if (this._map) {
        return this._map;
      }
      paArr = this.pa.toArray();
      drArr = this.dr.toArray();
      this._map = {};
      for (i = _i = 0, _ref = this.dr.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this._map[Math.floor(drArr[i].getTime() / 1000)] = paArr[i];
      }
      return this._map;
    };

    return GhCalendarPixelArt;

  })();

}).call(this);
