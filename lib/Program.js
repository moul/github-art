// Generated by CoffeeScript 1.4.0
(function() {
  var GithubArt, fs, program,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  program = require('commander');

  GithubArt = require('./GithubArt').GithubArt;

  module.exports.Program = (function() {

    function Program(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.run = __bind(this.run, this);

      this.parseOptions = __bind(this.parseOptions, this);

      this.initCommander = __bind(this.initCommander, this);

      if ((_ref = (_base = this.options).name) == null) {
        _base.name = 'github-art';
      }
      this.initCommander();
      return this;
    }

    Program.prototype.initCommander = function() {
      program.name = this.options.name;
      return program.version(Program.getVersion()).usage('--repos=git@github.com:user/github-art-data.git --art=/path/to/art.txt --path=/tmp/repos/').option('-v, --verbose', 'verbose output').option('-o, --override', 'erase local repos if exists').option('-f, --force', 'force push').option('-r, --repos <repos>', 'github repos url').option('-p, --path <path>', 'local git directory').option('-a, --art <art>', 'file containing github art (txt, 51x7)');
    };

    Program.prototype.parseOptions = function(fn) {
      var key, _i, _len, _ref;
      if (fn == null) {
        fn = null;
      }
      program.parse(process.argv);
      _ref = ['art', 'repos', 'path', 'override', 'force', 'override', 'verbose'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        this.options[key] = program[key];
      }
      if (typeof this.options.art === 'string') {
        this.options.art = {
          path: this.options.art
        };
      }
      if (typeof this.options.repos === 'string') {
        this.options.repos = {
          path: this.options.path,
          origin: this.options.repos,
          "new": this.options.repos
        };
      }
      this.options.date = {};
      if (fn) {
        return fn(false);
      }
    };

    Program.prototype.run = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      return this.parseOptions(function() {
        console.log(_this.options);
        return new GithubArt(_this.options, function(err, ga) {
          _this.ga = ga;
          return _this.ga.create_repos(function(err, data) {
            return console.log(err, data);
          });
        });
      });
    };

    Program.getVersion = function() {
      return JSON.parse(fs.readFileSync("" + __dirname + "/../package.json", 'utf8')).version;
    };

    Program.create = function(options) {
      if (options == null) {
        options = {};
      }
      return new Program(options);
    };

    Program.run = function(fn) {
      if (fn == null) {
        fn = null;
      }
      return (Program.create()).run(fn);
    };

    return Program;

  })();

}).call(this);
