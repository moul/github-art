// Generated by CoffeeScript 1.4.0
(function() {
  var fs, pth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pth = require('path');

  fs = require('fs');

  module.exports.PixelArt = (function() {

    function PixelArt(options, fn) {
      var _this = this;
      this.options = options != null ? options : {};
      if (fn == null) {
        fn = null;
      }
      this.toArray = __bind(this.toArray, this);

      this.toString = __bind(this.toString, this);

      this.loadFile = __bind(this.loadFile, this);

      switch (typeof this.options) {
        case 'string':
          this.options = {
            path: this.options
          };
      }
      if (this.options.path != null) {
        this.loadFile(this.options.path, function(err, data) {
          if (err) {
            return fn(err, data);
          }
          return fn(false, _this);
        });
      } else {
        fn(false, this);
      }
      return this;
    }

    PixelArt.prototype.loadFile = function(filePath, fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      filePath = pth.normalize(filePath.replace(/^~/, process.env.HOME));
      return fs.readFile(filePath, function(err, buffer) {
        if (err && buffer) {
          return fn(err, buffer);
        }
        _this.art = buffer.toString().split('\n').slice(0, 7);
        if (fn) {
          return fn(err, _this.art);
        }
      });
    };

    PixelArt.prototype.toString = function() {
      return this.art.join('');
    };

    PixelArt.prototype.toArray = function() {
      return this.toString().split(/(?:)/);
    };

    return PixelArt;

  })();

}).call(this);
